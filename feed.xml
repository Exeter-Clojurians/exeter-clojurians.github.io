<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://exeter-clojurians.space/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
Exeter Clojurians
</title>
<link>
http://exeter-clojurians.space/
</link>
<description>
Exeter Clojurian Geekery
</description>
<lastBuildDate>
Wed, 24 Jun 2015 15:03:43 +0100
</lastBuildDate>
<author>
Exeter Clojurians
</author>
<item>
<guid>
http://exeter-clojurians.space/posts/2015-06-24-monads.html
</guid>
<link>
http://exeter-clojurians.space/posts/2015-06-24-monads.html
</link>
<title>
Fourth meet - 23-06-2015
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;meet&amp;#95;#4&quot;&gt;&lt;/a&gt;Meet #4&lt;/h3&gt;&lt;h1&gt;&lt;a name=&quot;congratulations&quot;&gt;&lt;/a&gt;Congratulations&lt;/h1&gt;&lt;p&gt;Congratulations was extended to John on the arrival of his child. It was impressive that the birth only caused him to miss one meetup. &lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;monads&quot;&gt;&lt;/a&gt;Monads&lt;/h1&gt;&lt;p&gt;The meet started off with a lively discussion on Monads. The analogy of a box was used to aid the explanation. A Monad can be likened to a box that contains a context - the context could be a number, a list of numbers or all kinds of other things. The Monad has a &lt;code&gt;bind&lt;/code&gt; function. This &lt;code&gt;bind&lt;/code&gt; function takes a function as a parameter. Using that function it &lt;code&gt;bind&lt;/code&gt; applies it to the Monads context and spits out a new Monad that contains the results of the function applied to the context.&lt;/p&gt;&lt;p&gt;&lt;a href='http://adit.io/posts/2013-04-17-functors,&amp;#95;applicatives,&amp;#95;and&amp;#95;monads&amp;#95;in&amp;#95;pictures.html'&gt;This article&lt;/a&gt; explains it better.&lt;/p&gt;&lt;p&gt;Once we all understood the concept of Monads and had clarified how the word Monad should be pronounced, we explored how Monads could be used in Clojure. There are a number of &lt;a href='https://github.com/clojure/algo.monads'&gt;Clojure libraries&lt;/a&gt; that enable Monads. However, it was generally felt that Monads in Clojure aren't used that often.&lt;/p&gt;&lt;p&gt;hhdave demonstrated a web Monad developed in Common Lisp that was used to define the flow of data between a web client and server. Discussion ensued as to how idiomatic it's use would be within Clojure.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;om&quot;&gt;&lt;/a&gt;OM&lt;/h1&gt;&lt;p&gt;There was a brief demonstration of &lt;a href='https://github.com/omcljs/om'&gt;Om&lt;/a&gt; - a ClojureScript wrapper of ReactJS. ClojureScripts powerful interactive development model was highlighted. A Repl was connected to the running browser which allowed modifications to any code to be injected into the browser without reloading the page. Interactively evaluating and modifying the system state from within the Repl was also demonstrated.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;minecraft&quot;&gt;&lt;/a&gt;Minecraft&lt;/h1&gt;&lt;p&gt;The potential for using Clojure to develop Minecraft plugins was discussed. Due to it's interactive nature Clojure could be the ideal language for rapidly developing plugins - especially if you could connect the Repl directly into the game server. One to explore.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;operating&amp;#95;systems&quot;&gt;&lt;/a&gt;Operating Systems&lt;/h1&gt;&lt;p&gt;It was noted that every single laptop was a MacBook. A number of members did express a preference for Linux. BSD was mentioned, it was pointed out that the options for a number of commands were different to the Linux variants which could be highly annoying. However BSD is and always will be the True Unix. &lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;jobs&quot;&gt;&lt;/a&gt;Jobs&lt;/h1&gt;&lt;p&gt;We bemoaned the lack of jobs available in Clojure. It was noted that the problem goes both ways, many companies are hesitant to start projects using Clojure due to a lack of available developers and many developers are hesitant to invest time learning Clojure due to the lack of available jobs. A catch-22 situation.&lt;/p&gt;&lt;h1&gt;&lt;a name=&quot;next&amp;#95;meet&quot;&gt;&lt;/a&gt;Next meet&lt;/h1&gt;&lt;p&gt;It was decided that the next meet should be spent getting down and dirty with some real coding. We need to decide exactly what over the next few weeks.&lt;/p&gt;
</description>
<pubDate>
Wed, 24 Jun 2015 00:00:00 +0100
</pubDate>
<author>
Exeter Clojurians
</author>
</item>
<item>
<guid>
http://exeter-clojurians.space/posts/2015-05-27-meet.html
</guid>
<link>
http://exeter-clojurians.space/posts/2015-05-27-meet.html
</link>
<title>
Third meet - 27-05-2015
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;meet&amp;#95;#3&quot;&gt;&lt;/a&gt;Meet #3&lt;/h3&gt;&lt;p&gt;Largely discussion based. A wide range of topics were covered.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;transducers&quot;&gt;&lt;/a&gt;Transducers&lt;/h4&gt;&lt;p&gt;An excellent overview of the forthcoming transducers was provided courtesy of Dan Stone. The advantages of composition and efficiency due to not having to create intermediate collections were covered. Transducers were compared to .Net's Linq. In many ways they are similar - however .Net does have to rely on mutation within the Enumerator whereas Clojure does not.&lt;/p&gt;&lt;p&gt;A great follow up tutorial was provided : &lt;a href='http://elbenshira.com/blog/understanding-transducers/'&gt;http://elbenshira.com/blog/understanding-transducers/&lt;/a&gt;&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;component&quot;&gt;&lt;/a&gt;Component&lt;/h4&gt;&lt;p&gt;We discussed the Component library which was highly recommended for complex systems. There were some concerns raised by the Java devs that it was bringing back the days of Spring with it's massive lists of config settings. However, Component is different due to it config options being native Clojure data structures and there generally being less components in a Clojure system.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;macros&quot;&gt;&lt;/a&gt;Macros&lt;/h4&gt;&lt;p&gt;Macros are used very rarely. They can cause numerous problems - you cannot apply a macro, it often obscures what is going on. Compojure (a macro based routing library) was compared to Bidi (a data structure based routing library). It was generally felt Bidi was much easier to work with.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;editors&quot;&gt;&lt;/a&gt;Editors&lt;/h4&gt;&lt;p&gt;Inevitably some of the conversation turned to peoples preferred editors. Generally the group is split between Emacs and Cursive. Even the Emacs users admitted that Cursive is starting to look pretty interesting.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;outsourcing&quot;&gt;&lt;/a&gt;Outsourcing&lt;/h4&gt;&lt;p&gt;We covered the foibles of working with Clojure in an organisation that heavily leverages outsourcing. Since Clojure is not as prevalant most outsourced work ends up being in Java.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;professional&amp;#95;development&quot;&gt;&lt;/a&gt;Professional development&lt;/h4&gt;&lt;p&gt;We discussed the advantages of maintaining a blog and github profile. Getting involved in open source projects is not always easy. First it can be difficult finding a decent project to contribute to. Then to make a decent contribution one always has to also include tests and documentation - which can be quite boring/intimidating to do. So often it is just easier to keep the code to yourself. However it was pointed out that any contribution is often valued. A great way to get started contributing is with documentation - from simple typo fixes to adding whole wiki pages. And there is always the exeter-clojurians.space site that could do with contributions!&lt;/p&gt;
</description>
<pubDate>
Wed, 27 May 2015 00:00:00 +0100
</pubDate>
<author>
Exeter Clojurians
</author>
</item>
<item>
<guid>
http://exeter-clojurians.space/posts/2015-04-29-the-quine.html
</guid>
<link>
http://exeter-clojurians.space/posts/2015-04-29-the-quine.html
</link>
<title>
The quine - 29-04-2015
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;meet&amp;#95;#2&quot;&gt;&lt;/a&gt;Meet #2&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt; A quine is a non-empty computer program which takes no input and produces a copy of its own source code as its only output. The standard terms for these programs in the computability theory and computer science literature are &quot;self-replicating programs&quot;, &quot;self-reproducing programs&quot;, and &quot;self-copying programs&quot;. &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;We came up with the following masterpieces :&lt;/p&gt;&lt;p&gt;In Common Lisp, courtesy of hhdave :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;defun f &amp;#40;&amp;#41;
 &amp;#40;let &amp;#40;&amp;#40;quote &amp;#40;string &amp;#40;code-char 34&amp;#41;&amp;#41;&amp;#41;&amp;#41;
   &amp;#40;flet &amp;#40;&amp;#40;g &amp;#40;x&amp;#41;
            &amp;#40;str &amp;quot;&amp;#40;defun f &amp;#40;&amp;#41; &amp;#40;let &amp;#40;&amp;#40;quote &amp;#40;string &amp;#40;code-char 34&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;#40;flet &amp;#40;&amp;#40;g &amp;#40;x&amp;#41; &amp;#40;str &amp;quot; x &amp;quot;&amp;#41;&amp;#41;&amp;#41; &amp;#40;g &amp;#40;str quote &amp;#40;g &amp;#40;str quote &amp;#40;string &amp;#40;code-char 120&amp;#41;&amp;#41;  quote&amp;#41;&amp;#41; quote&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41; &amp;quot;&amp;#41;&amp;#41;&amp;#41;
     &amp;#40;g &amp;#40;str quote &amp;#40;g &amp;#40;str quote &amp;#40;string &amp;#40;code-char 120&amp;#41;&amp;#41; quote &amp;#41;&amp;#41; quote&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In Clojure, courtesy of eggman :&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;#40;def quine
  &amp;#40;fn &amp;#91;&amp;#93;
    &amp;#40;&amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;list &amp;#40;quote fn&amp;#41; &amp;#91;&amp;#93; &amp;#40;list x &amp;#40;list &amp;#40;quote quote&amp;#41; x&amp;#41;&amp;#41;&amp;#41;&amp;#41;
      &amp;#40;quote &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;list &amp;#40;quote fn&amp;#41; &amp;#91;&amp;#93; &amp;#40;list x &amp;#40;list &amp;#40;quote quote&amp;#41; x&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
  &amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lots of fun was had.&lt;/p&gt;
</description>
<pubDate>
Wed, 29 Apr 2015 00:00:00 +0100
</pubDate>
<author>
Exeter Clojurians
</author>
</item>
<item>
<guid>
http://exeter-clojurians.space/posts/2015-03-26-first-meet.html
</guid>
<link>
http://exeter-clojurians.space/posts/2015-03-26-first-meet.html
</link>
<title>
The first meet 26-03-2015
</title>
<description>
&lt;h3&gt;&lt;a name=&quot;the&amp;#95;first&amp;#95;meet&quot;&gt;&lt;/a&gt;The first meet&lt;/h3&gt;&lt;p&gt;We met, we talked Clojure, we left.&lt;/p&gt;
</description>
<pubDate>
Thu, 26 Mar 2015 00:00:00 +0000
</pubDate>
<author>
Exeter Clojurians
</author>
</item>
</channel>
</rss>
